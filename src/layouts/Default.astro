---
import { type ClubsConfiguration } from '@devprotocol/clubs-core'
import { ClubsPictogramAdaptable as Favicon } from '@devprotocol/clubs-core/images'
import type { UndefinedOr } from '@devprotocol/util-ts'
import '@devprotocol/clubs-core/styles'
import Header from '../components/Header/Header.astro'
import Hero from '../components/Hero/Hero.vue'
import type { ClubsNavigationLink as NavLink } from '@devprotocol/clubs-core'
import type { Membership } from '@devprotocol/clubs-core'
import type { MembersCountVisibilityValue } from '..'
import type { GlobalConfig, HomeConfig } from '../types'
import Marquee from '../components/Marquee/Marquee.vue'

const { page } = Astro.params
const {
	theme2: { metaTitle, config, homeConfig, globalConfig, description, base },
	signals,
} = Astro.props as {
	theme2: {
		memberships?: Membership[]
		metaTitle?: string
		config: ClubsConfiguration
		globalConfig?: GlobalConfig
		homeConfig?: HomeConfig
		membersCountConfig?: MembersCountVisibilityValue
		description?: string
		base: string
	}
	signals?: string[]
}

const langs = Astro.request.headers.get('accept-language')?.split(',') ?? ['en']

const notDisplayConnection = signals?.includes('connection-button-hide')

const title = metaTitle ? `${config.name} : ${metaTitle}` : config.name

const ogp = config.options?.find((option) => option.key === 'ogp')
	?.value as UndefinedOr<{ image?: string }>

const avatarImgSrc: UndefinedOr<string> = config.options?.find(
	(option) => option.key === 'avatarImgSrc',
)?.value as string

const navigationLinks: NavLink[] = [
	...((config.options?.find((option) => option.key === 'navigationLinks')
		?.value as NavLink[]) ?? []),
].map((link) =>
	link.path.startsWith('http')
		? link
		: { ...link, path: `${base}${link.path}` },
)

const url = Astro.url.origin

const bodyColor = globalConfig?.ink ?? '#fff'
const backgroundColor = globalConfig?.bg ?? '#ADADAD'

const truncatedDescription = ((desc) =>
	desc.slice(0, 139).join('') + (desc.length > 139 ? '...' : ''))([
	...(description?.replace(/[\s|\n|\r\n|\r]/g, ' ') ?? ''),
])

const $1 = '$1'
const regContainerCls = /CONTAINER_CLASS_NAMES:\[(.*)\]/
const regContentClas = /CONTENT_CLASS_NAMES:\[(.*)\]/
const SignaledContainerClas = signals
	?.find((s) => regContainerCls.test(s))
	?.replace(regContainerCls, $1)
const SignaledContentClas = signals
	?.find((s) => regContentClas.test(s))
	?.replace(regContentClas, $1)

const signalMarquee = signals?.find((s) => s === 'SHOW_MARQUEE') ? true : false
---

<html lang="en" hashi-theme="light">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<title>{title}</title>
		<link rel="icon" type="image/svg" href={avatarImgSrc || Favicon.src} />
		<meta name="description" content={`${truncatedDescription}`} />
		<meta property="og:title" content={title} />
		<meta property="og:type" content="website" />
		<meta property="og:url" content={url} />
		<meta property="og:image" content={`${ogp?.image}`} />
		<meta property="og:description" content={truncatedDescription} />
		<meta property="og:site_name" content={config.name} />
		<meta name="twitter:site" content={config.twitterHandle} />
		<meta name="twitter:creator" content={config.twitterHandle} />
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={truncatedDescription} />
		<meta name="twitter:image" content={`${ogp?.image}`} />
		<style define:vars={{ bodyColor, backgroundColor }}>
			html,
			body {
				color: var(--bodyColor);
				background-color: var(--backgroundColor);
			}
		</style>
	</head>

	<body>
		<div
			class:list={[
				{
					[SignaledContainerClas ?? '']: Boolean(SignaledContainerClas),
					'font-body': SignaledContainerClas === undefined,
				},
			]}
		>
			<slot name="before:content" />

			<div class:list={[SignaledContentClas]}>
				<Header
					base={base}
					connection={!notDisplayConnection}
					navigationLinks={navigationLinks}
				>
					<slot name="clubs:connect-button" slot="clubs:connect-button" />
				</Header>

				{
					signalMarquee && (
						<div class="container mx-auto mb-2 px-2">
							<Marquee
								client:load
								messages={globalConfig?.marquee}
								color={homeConfig?.hero?.color}
								langs={langs}
							/>
						</div>
					)
				}

				{
					!page && (
						<Hero
							client:load
							image={homeConfig?.hero?.image}
							logo={homeConfig?.hero?.logo ?? globalConfig?.logo}
							text={homeConfig?.hero?.text?.en}
							gradientColor={homeConfig?.hero?.color}
							copyright={globalConfig?.copyright}
						/>
					)
				}

				<main class="container mx-auto px-2 py-3 md:p-5">
					<slot />
				</main>

				<footer class="p-14"></footer>
			</div>

			<slot name="after:content" />
		</div>
	</body>
</html>
