---
import {
	type ClubsConfiguration,
	ClubsPluginSignal,
} from '@devprotocol/clubs-core'
import { ClubsPictogramAdaptable as Favicon } from '@devprotocol/clubs-core/images'
import type { UndefinedOr } from '@devprotocol/util-ts'
import '@devprotocol/clubs-core/styles'
import Header from '../components/Header/Header.astro'
import Hero from '../components/Hero/Hero.vue'
import type { ClubsNavigationLink as NavLink } from '@devprotocol/clubs-core'
import type { Membership } from '@devprotocol/clubs-core'
import type { MembersCountVisibilityValue } from '..'
import type { GlobalConfig, HomeConfig } from '../types'
import Home from '../components/Home/Pages.vue'

const { page } = Astro.params
const {
	theme2: {
		metaTitle,
		config,
		homeConfig,
		globalConfig,
		memberships,
		description,
		membersCountConfig,
	},
	signals,
} = Astro.props as {
	theme2: {
		memberships?: Membership[]
		metaTitle?: string
		config: ClubsConfiguration
		globalConfig?: GlobalConfig
		homeConfig?: HomeConfig
		membersCountConfig?: MembersCountVisibilityValue
		description?: string
	}
	signals?: string[]
}

const displayFullPage = signals?.includes(ClubsPluginSignal.DisplayFullPage)
const notDisplayConnection = signals?.includes('connection-button-hide')

const { name, propertyAddress, rpcUrl, chainId } = config
const title = metaTitle ? `${config.name} : ${metaTitle}` : config.name

const ogp = config.options?.find((option) => option.key === 'ogp')
	?.value as UndefinedOr<{ image?: string }>

const avatarImgSrc: UndefinedOr<string> = config.options?.find(
	(option) => option.key === 'avatarImgSrc',
)?.value as string

const socialLinks =
	(config.options?.find((option) => option.key === 'socialLinks')
		?.value as UndefinedOr<NavLink[]>) ?? ([] as NavLink[])

const twitter = socialLinks?.find((l) => l.kind === 'twitter')
const discord = socialLinks?.find((l) => l.kind === 'discord')
const socials =
	twitter || discord ? [twitter, discord].map((x) => x) : socialLinks

const navigationLinks: NavLink[] = [
	...((config.options?.find((option) => option.key === 'navigationLinks')
		?.value as NavLink[]) ?? []),
]
const currentLink = navigationLinks?.find((link) =>
	((pathname) => pathname === link.path)(`/${page ?? ''}`),
)
const footerLinks = config.options?.find(
	(option) => option.key === 'footerLinks',
)?.value as UndefinedOr<NavLink[]>

const url = Astro.url.origin

const bodyColor = globalConfig?.ink ?? '#fff'
const backgroundColor = globalConfig?.bg ?? '#ADADAD'

const hasNotAMembership = memberships ? memberships.length < 1 : true

const truncatedDescription = ((desc) =>
	desc.slice(0, 139).join('') + (desc.length > 139 ? '...' : ''))([
	...(description?.replace(/[\s|\n|\r\n|\r]/g, ' ') ?? ''),
])
---

<html lang="en" hashi-theme="light">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<title>{title}</title>
		<link rel="icon" type="image/svg" href={avatarImgSrc || Favicon.src} />
		<meta name="description" content={`${truncatedDescription}`} />
		<meta property="og:title" content={title} />
		<meta property="og:type" content="website" />
		<meta property="og:url" content={url} />
		<meta property="og:image" content={`${ogp?.image}`} />
		<meta property="og:description" content={truncatedDescription} />
		<meta property="og:site_name" content={config.name} />
		<meta name="twitter:site" content={config.twitterHandle} />
		<meta name="twitter:creator" content={config.twitterHandle} />
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={truncatedDescription} />
		<meta name="twitter:image" content={`${ogp?.image}`} />
		<style define:vars={{ bodyColor, backgroundColor }}>
			html,
			body {
				color: var(--bodyColor);
				background-color: var(--backgroundColor);
			}
		</style>
	</head>

	<body class="font-body">
		<Header
			chainId={chainId}
			config={config}
			connection={!notDisplayConnection}
		>
			<slot name="clubs:connect-button" slot="header:connect-button" />
		</Header>
		{
			!page && (
				<Hero
					client:only="vue"
					image={homeConfig?.hero?.image}
					logo={globalConfig?.logo}
					text={homeConfig?.hero?.text?.en}
				/>
			)
		}

		<main class="container mx-auto px-5 py-3 md:p-5">
			{
				page && (
					<section class="mb-9">
						<p class="text-sm text-white">
							Lorem ipsum odor amet, consectetuer adipiscing elit. Venenatis
							facilisis arcu venenatis hac ac purus auctor in. Eget tincidunt
							nibh ad; feugiat cubilia in! Proin auctor erat, cursus augue
							venenatis rutrum imperdiet torquent. Erat sem convallis efficitur
							proin rhoncus condimentum felis. Donec penatibus tempor efficitur
							eget neque ex ex condimentum ex. Parturient elit porta fermentum
							eros gravida ac augue posuere? Adipiscing lacinia purus nec massa
							sapien lorem.
							<br />
							<br />
							Quis netus taciti amet dolor elit rhoncus. Condimentum curabitur
							per fermentum litora dictumst habitasse. Dis suspendisse imperdiet
							facilisi ad primis amet urna nisi. Sollicitudin orci non donec
							adipiscing torquent laoreet scelerisque. Posuere natoque auctor
							pellentesque consectetur parturient elementum nibh. Nibh interdum
							hendrerit risus aliquam egestas est efficitur magnis eget.
							Convallis luctus turpis lacinia vulputate nisi. Nascetur sodales
							ridiculus laoreet elementum per tristique sodales sagittis. Dolor
							hac donec habitasse eleifend viverra; torquent quis neque
							phasellus. Ante velit odio amet, eros cursus luctus consequat?
							<br />
						</p>
					</section>
				)
			}
			{!page && <Home client:only="vue" />}
		</main>
	</body>
</html>
